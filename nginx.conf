worker_processes auto;

env REDIS_HOST;
env PROTECTED_UPSTREAM;

events {
    worker_connections 1024;
}

http {
    # resolver $DNS_RESOLVER 8.8.8.8 8.8.4.4 valid=300s;
    resolver 127.0.0.1 valid=30s;

    lua_package_path "/usr/local/openresty/luajit/lib/luarocks/rocks-5.1/lua-resty-redis/lib/?.lua;;";


    server {
        listen 80;
        server_name localhost;
        
        location / {
            set $upstream "";

            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000)  -- 1 sec timeout

                local protected_upstream = os.getenv("PROTECTED_UPSTREAM") or "127.0.0.1:8080"
                ngx.var.upstream = protected_upstream

                -- Connect to Redis using environment variable or fallback to localhost
                local redis_host = os.getenv("REDIS_HOST") or "127.0.0.1"
                local ok, err = red:connect(redis_host, 6379)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to Redis: ", err)
                    return ngx.exit(500)
                end

                local api_key = ngx.req.get_headers()["Authorization"]
                if not api_key then
                    ngx.status = 403
                    ngx.say("Authorization header is missing")
                    return ngx.exit(403)
                end

                -- Extract API key from "Bearer YOUR_API_KEY" format
                local bearer_pattern = "^Bearer%s+(.+)$"
                local extracted_key = string.match(api_key, bearer_pattern)
                if not extracted_key then
                    ngx.status = 403
                    ngx.say("Invalid Authorization header format. Expected: Bearer YOUR_API_KEY")
                    return ngx.exit(403)
                end

                local res, err = red:get(extracted_key)
                if not res or res == ngx.null then
                    ngx.status = 403
                    ngx.say("Invalid API key")
                    return ngx.exit(403)
                end

                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.log(ngx.ERR, "failed to set Redis keepalive: ", err)
                end
            }

            proxy_pass http://${upstream}/;
        }
    }
}

